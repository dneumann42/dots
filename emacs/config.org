#+TITLE: Dustin's NEW emacs config

* Basic configuration

** Package sources

#+begin_src emacs-lisp
(require 'package)

(add-to-list 'package-archives
 '("melpa" . "https://melpa.org/packages/") t)

(package-initialize)
#+end_src

#+begin_src emacs-lisp
(setq
 inhibit-startup-message t
 visible-bell t)

;; Highlight urls for clicking
(goto-address-mode 1)
#+end_src

** Line numbers

#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(column-number-mode)
#+end_src

** Fringe mode

Disabling fringes

#+begin_src emacs-lisp
(fringe-mode -1)
#+end_src

* Gui interface tweaks

#+begin_src emacs-lisp
(use-package emacs
  :init
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (load-theme 'some-nice-colors t)
  ;; (load-theme 'wheatgrass t)
  )
#+end_src

Dimming the parentheses Reference: DimParentheses

#+begin_src emacs-lisp
; (defface paren-face
;   '((((class color) (background dark))
;      (:foreground "grey25"))
;     (((class color) (background light))
;      (:foreground "grey80")))
;   "Face used to dim parentheses.")
; 
; (defface paren-face-brighter
;   '((((class color) (background dark))
;      (:foreground "grey40"))
;     (((class color) (background light))
;      (:foreground "grey80")))
;   "Face used to dim parentheses.")
; 
; (add-hook 'emacs-lisp-mode-hook 
;     (lambda ()
; 	(font-lock-add-keywords nil 
; 	'(("(\\|)" . 'paren-face)))))
; 
; (add-hook 'nim-mode-hook 
;     (lambda ()
; 	(font-lock-add-keywords nil 
; 	'(("(\\|)" . 'paren-face-brighter)))))
#+end_src

** Jumping

#+begin_src emacs-lisp
(use-package dumb-jump
  :ensure t
  :hook (xref-backend-functions . dumb-jump-xref-activate))
#+end_src

** Eldoc

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'eldoc-mode)
(add-hook 'ielm-mode-hook 'eldoc-mode)
#+end_src

** Modeline

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init
  (setq
    doom-modeline-mjaor-mode-icon t
    doom-modeline-time t)
  :config
  (doom-modeline-mode 1))

(setq pixel-scroll-precision-large-scroll-height 40.0)
#+end_src

** Window balancing

#+begin_src emacs-lisp
(use-package zoom
  :ensure
  :config
  (zoom-mode))
#+end_src

* Emacs behavior

** Disabling backup files

#+begin_src emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq create-lockfiles nil)
#+end_src

** Save place

When you visit a file, point goes to the last place where it was when you previously visited the same file.

#+begin_src emacs-lisp
(save-place-mode 1)
#+end_src

** Parens and auto parens

#+begin_src emacs-lisp
(electric-pair-mode 1)
(setq electric-pair-pairs
      '((?\" . ?\") (?\{ . ?\})))
#+end_src

** Ido mode

#+begin_src emacs-lisp
(use-package ido
  :ensure t
  :init
  (setq
    ido-enable-flex-matching t
    ido-everywhere t
    ido-use-filename-at-point 'guess
    ido-create-new-buffer 'always ;; creates new buffer even if misspelled
    ido-file-extensions-order '(".org" ".txt" ".py" ".el" ".emacs" ".nim"))
  :config
  (ido-mode 1)
  (ido-everywhere 1))

(use-package ido-vertical-mode
  :ensure t
  :init
  (setq ido-use-faces t
	ido-vertical-define-keys 'C-n-and-C-p-only)
  :config
  (ido-vertical-mode 1)
  (set-face-attribute 'ido-vertical-first-match-face nil
		      :height 120
		      :underline t)
  :after (ido))

(use-package smex
  :ensure t
  :config
  (smex-initialize)
  :bind (("M-x" . smex)
         ("M-X" . smex-major-mode-commands)
         ("C-c C-c M-x" . execute-extended-command))
  :after (ido))
#+end_src

** Shell pop

#+begin_src emacs-lisp
(use-package shell-pop
  :ensure t
  :custom
  (shell-pop-default-directory "~/")
  (shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
  (shell-pop-term-shell "/bin/bash")
  (shell-pop-window-size 20)
  (shell-pop-full-span nil)
  (shell-pop-window-position "bottom")
  (shell-pop-autocd-to-working-dir t)
  (shell-pop-restore-window-configuration t)
  (shell-pop-cleanup-buffer-at-process-exit t)
  (shell-pop-universal-key "C-c SPC"))
#+end_src

** Custom file

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

** Multi cursors

#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t		
  :bind			
  (:map global-map
    ("C-S-c C-S-c" . mc/edit-lines)
    ("C->" . mc/mark-next-like-this)
    ("C-<" . mc/mark-previous-like-this)
    ("C-c C-<" . mc/mark-all-like-this)))
#+end_src

** Misc

#+begin_src emacs-lisp
(delete-selection-mode t)
;; revert buffers automatically when underlying files are changed externally
(global-auto-revert-mode t)
;; smart tab behavior - indent or complete
(setq tab-always-indent 'complete)
;; diminish keeps the modeline tidy

;; meaningful names for buffers with the same name
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
(setq uniquify-separator "/")
(setq uniquify-after-kill-buffer-p t)    ; rename after killing uniquified
(setq uniquify-ignore-buffers-re "^\\*") ; don't muck with special buffers

(load "~/.emacs.d/volatile-highlights.el")
(require 'volatile-highlights)
(volatile-highlights-mode t)

(set-default 'imenu-auto-rescan t)
#+end_src

** Expand region

#+begin_src emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))
#+end_src

** Auto completion

#+begin_src emacs-lisp
(use-package company
  :ensure t
  :after lsp-mode
  :hook (prog-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package company-box
  :ensure t
  :hook (company-mode . company-box-mode))

(use-package yasnippet
  :ensure t)
#+end_src

** Which key

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+end_src

** Global search
#+begin_src emacs-lisp
(use-package ag
  :ensure t
  :config
  (global-set-key (kbd "M-s") 'ag-project))
#+end_src

** Wrapping search

https://stackoverflow.com/questions/285660/automatically-wrapping-i-search

#+begin_src emacs-lisp
;; Prevents issue where you have to press backspace twice when
;; trying to remove the first character that fails a search
(define-key isearch-mode-map [remap isearch-delete-char] 'isearch-del-char)

(defadvice isearch-search (after isearch-no-fail activate)
  (unless isearch-success
    (ad-disable-advice 'isearch-search 'after 'isearch-no-fail)
    (ad-activate 'isearch-search)
    (isearch-repeat (if isearch-forward 'forward))
    (ad-enable-advice 'isearch-search 'after 'isearch-no-fail)
    (ad-activate 'isearch-search)))
#+end_src

** Treemacs

#+begin_src emacs-lisp
;; hack

(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))

  :config
  (set-face-background 'treemacs-window-background-face "#070506")

  :bind ("C-x p" . projectile-find-file)
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-,"       . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

;; Reloads the theme when starting treemacs to
;; fix icon backgrounds

(add-hook
  'treemacs-mode-hook
   (lambda () (load-theme 'some-nice-colors t)))

(use-package treemacs-evil
  :after (treemacs evil)
  :ensure t)

(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)

(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)

(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))

(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  :after (treemacs)
  :ensure t
  :config (treemacs-set-scope-type 'Tabs))
#+end_src

** Project management

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :bind
  (:map global-map
        ("C-c p" . projectile-command-map))
  :config
  (projectile-mode 1))
#+end_src

* Keybindings

** Undo and redo

#+begin_src emacs-lisp
(global-set-key (kbd "C-z") 'undo)
(global-set-key (kbd "C-Z") 'undo-redo)
#+end_src

** Block movement

Reference: http://xahlee.info/emacs/emacs/emacs_move_by_paragraph.html

#+begin_src emacs-lisp
(defun forward-block (&optional n)
  (interactive)
  (let ((n (if (null n) 1 n)))
    (re-search-forward "\n[\t\n ]*\n+" nil "NOERROR" n)))

(defun backward-block (&optional n)
  (interactive)
  (let ((n (if (null n) 1 n))
	($1 1))
    (while (<= $1 1)
      (if (re-search-backward "\n[\t\n ]*\n+" nil "NOERROR")
	  (progn (skip-chars-backward "\n\t "))
	(progn (goto-char (point-min))
	       (setq $1 n)))
      (setq $1 (1+ $1)))))


(global-set-key (kbd "M-n") 'forward-block)
(global-set-key (kbd "M-p") 'backward-block)
#+end_src

* Completion and searching

#+begin_src emacs-lisp
(setq completion-category-overrides
      '((buffer
	 (styles initials flex)
	 (cycle . 3))))

(setq read-buffer-completion-ignore-case t)
(setq read-file-name-completion-ignore-case t)
#+end_src

* Org mode

#+begin_src emacs-lisp
(setq
 org-src-preserve-indentation nil
 org-edit-src-content-indentation 0
 org-src-fontify-natively t)

;; Remap org mode keys
(with-eval-after-load "org"
  (define-key org-mode-map (kbd "C-,") #'treemacs))

(setq org-hide-emphasis-markers t)
#+end_src

* Markdown

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown"))
#+end_src

* Langauges

** LSP

#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t
  :commands (lsp lsp-deferred)
  :hook ((lua-mode c-mode nim-mode) . lsp-deferred)
  :init
  (setq lsp-keymap-prefix "C-l")
  :config
  (lsp-enable-which-key-integration t)
  (setq lsp-auto-guess-root t)
  (setq lsp-log-io nil)
  (setq lsp-restart 'auto-restart)
  (setq lsp-enable-symbol-highlighting nil)
  (setq lsp-enable-on-type-formatting nil)
  (setq lsp-enable-folding nil)
  (setq lsp-enable-snippet nil)
  )

(use-package lsp-ui
  :ensure t
  :hook (lsp-mode . lsp-ui-mode)
  :config
  (setq lsp-ui-doc-position 'bottom)
  (setq lsp-ui-doc-enable nil)
  (setq lsp-ui-doc-header t)
  (setq lsp-ui-doc-include-signature t)
  (setq lsp-ui-doc-border (face-foreground 'default))
  (setq lsp-ui-sideline-show-code-actions t)
  (setq lsp-ui-sideline-delay 0.05)
  :commands lsp-ui-mode)

(use-package lsp-treemacs
  :ensure t
  :after lsp)

(use-package flycheck
  :ensure t
  :hook (after-init-hook #'global-flycheck-mode))
#+end_src

** Lisp

#+begin_src emacs-lisp
(use-package lispy
  :ensure t)

(use-package eros
  :ensure t
  :config
  (eros-mode 1))
#+end_src

*** Fennel

#+begin_src emacs-lisp
(setq exec-path (append exec-path '("~/.local/bin/scripts/")))
(setq exec-path (append exec-path '("~/.nimble/bin/")))

(use-package fennel-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.fnl\\'" . fennel-mode)))
#+end_src

** Lua

#+begin_src emacs-lisp
(use-package lua-mode
  :ensure t
  :hook (lua-mode . lsp-deferred)
  :config
  (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
  (add-to-list 'interpreter-mode-alist '("lua" . lua-mode)))
#+end_src

** Nim

#+begin_src emacs-lisp
(use-package nim-mode
  :ensure)
#+end_src

* Ideas

create a cheatsheet that shows all useful keybindings, nicely categorized,
and also useful functions and commands
